|uart_board
CLOCK_50 => CLOCK_50.IN2
SW[0] => SW[0].IN1
SW[1] => SW[1].IN1
SW[2] => SW[2].IN1
SW[3] => SW[3].IN1
SW[4] => SW[4].IN1
SW[5] => SW[5].IN1
SW[6] => SW[6].IN1
SW[7] => SW[7].IN1
KEY[0] => send.IN1
KEY[1] => LEDR.OUTPUTSELECT
KEY[1] => LEDR.OUTPUTSELECT
KEY[1] => LEDR.OUTPUTSELECT
KEY[1] => LEDR.OUTPUTSELECT
KEY[1] => LEDR.OUTPUTSELECT
KEY[1] => LEDR.OUTPUTSELECT
KEY[1] => LEDR.OUTPUTSELECT
KEY[1] => LEDR.OUTPUTSELECT
LEDR[0] << LEDR[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
LEDR[1] << LEDR[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
LEDR[2] << LEDR[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
LEDR[3] << LEDR[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
LEDR[4] << LEDR[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
LEDR[5] << LEDR[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
LEDR[6] << LEDR[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
LEDR[7] << LEDR[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE
GPIO_0[0] <> tx:uart_tx_inst.tx
GPIO_0[1] <> rx:uart_rx_inst.rx
GPIO_0[2] <> <UNC>
GPIO_0[3] <> <UNC>
GPIO_0[4] <> <UNC>
GPIO_0[5] <> <UNC>
GPIO_0[6] <> <UNC>
GPIO_0[7] <> <UNC>
GPIO_0[8] <> <UNC>
GPIO_0[9] <> <UNC>
GPIO_0[10] <> <UNC>
GPIO_0[11] <> <UNC>
GPIO_0[12] <> <UNC>
GPIO_0[13] <> <UNC>
GPIO_0[14] <> <UNC>
GPIO_0[15] <> <UNC>
GPIO_0[16] <> <UNC>
GPIO_0[17] <> <UNC>
GPIO_0[18] <> <UNC>
GPIO_0[19] <> <UNC>
GPIO_0[20] <> <UNC>
GPIO_0[21] <> <UNC>
GPIO_0[22] <> <UNC>
GPIO_0[23] <> <UNC>
GPIO_0[24] <> <UNC>
GPIO_0[25] <> <UNC>
GPIO_0[26] <> <UNC>
GPIO_0[27] <> <UNC>
GPIO_0[28] <> <UNC>
GPIO_0[29] <> <UNC>
GPIO_0[30] <> <UNC>
GPIO_0[31] <> <UNC>
GPIO_0[32] <> <UNC>
GPIO_0[33] <> <UNC>
GPIO_0[34] <> <UNC>
GPIO_0[35] <> <UNC>


|uart_board|tx:uart_tx_inst
clk => shift_reg[0].CLK
clk => shift_reg[1].CLK
clk => shift_reg[2].CLK
clk => shift_reg[3].CLK
clk => shift_reg[4].CLK
clk => shift_reg[5].CLK
clk => shift_reg[6].CLK
clk => shift_reg[7].CLK
clk => shift_reg[8].CLK
clk => shift_reg[9].CLK
clk => shift_reg[10].CLK
clk => bit_cnt[0].CLK
clk => bit_cnt[1].CLK
clk => bit_cnt[2].CLK
clk => bit_cnt[3].CLK
clk => sending.CLK
clk => busy~reg0.CLK
clk => tx~reg0.CLK
tick => always0.IN1
send => always0.IN1
rst => shift_reg[0].ACLR
rst => shift_reg[1].ACLR
rst => shift_reg[2].ACLR
rst => shift_reg[3].ACLR
rst => shift_reg[4].ACLR
rst => shift_reg[5].ACLR
rst => shift_reg[6].ACLR
rst => shift_reg[7].ACLR
rst => shift_reg[8].ACLR
rst => shift_reg[9].ACLR
rst => shift_reg[10].ACLR
rst => bit_cnt[0].ACLR
rst => bit_cnt[1].ACLR
rst => bit_cnt[2].ACLR
rst => bit_cnt[3].ACLR
rst => sending.ACLR
rst => busy~reg0.ACLR
rst => tx~reg0.PRESET
data_in[0] => WideXor0.IN0
data_in[0] => shift_reg.DATAB
data_in[1] => WideXor0.IN1
data_in[1] => shift_reg.DATAB
data_in[2] => WideXor0.IN2
data_in[2] => shift_reg.DATAB
data_in[3] => WideXor0.IN3
data_in[3] => shift_reg.DATAB
data_in[4] => WideXor0.IN4
data_in[4] => shift_reg.DATAB
data_in[5] => WideXor0.IN5
data_in[5] => shift_reg.DATAB
data_in[6] => WideXor0.IN6
data_in[6] => shift_reg.DATAB
data_in[7] => WideXor0.IN7
data_in[7] => shift_reg.DATAB
tx <= tx~reg0.DB_MAX_OUTPUT_PORT_TYPE
busy <= busy~reg0.DB_MAX_OUTPUT_PORT_TYPE


|uart_board|rx:uart_rx_inst
clk => data_out[0]~reg0.CLK
clk => data_out[1]~reg0.CLK
clk => data_out[2]~reg0.CLK
clk => data_out[3]~reg0.CLK
clk => data_out[4]~reg0.CLK
clk => data_out[5]~reg0.CLK
clk => data_out[6]~reg0.CLK
clk => data_out[7]~reg0.CLK
clk => parity_check.CLK
clk => error~reg0.CLK
clk => done~reg0.CLK
clk => shift_reg[0].CLK
clk => shift_reg[1].CLK
clk => shift_reg[2].CLK
clk => shift_reg[3].CLK
clk => shift_reg[4].CLK
clk => shift_reg[5].CLK
clk => shift_reg[6].CLK
clk => shift_reg[7].CLK
clk => bit_counter[0].CLK
clk => bit_counter[1].CLK
clk => bit_counter[2].CLK
clk => bit_counter[3].CLK
clk => receiving.CLK
rst => receiving.OUTPUTSELECT
rst => bit_counter.OUTPUTSELECT
rst => bit_counter.OUTPUTSELECT
rst => bit_counter.OUTPUTSELECT
rst => bit_counter.OUTPUTSELECT
rst => shift_reg.OUTPUTSELECT
rst => shift_reg.OUTPUTSELECT
rst => shift_reg.OUTPUTSELECT
rst => shift_reg.OUTPUTSELECT
rst => shift_reg.OUTPUTSELECT
rst => shift_reg.OUTPUTSELECT
rst => shift_reg.OUTPUTSELECT
rst => shift_reg.OUTPUTSELECT
rst => done.OUTPUTSELECT
rst => error.OUTPUTSELECT
rst => data_out[0]~reg0.ENA
rst => data_out[1]~reg0.ENA
rst => data_out[2]~reg0.ENA
rst => data_out[3]~reg0.ENA
rst => data_out[4]~reg0.ENA
rst => data_out[5]~reg0.ENA
rst => data_out[6]~reg0.ENA
rst => data_out[7]~reg0.ENA
rst => parity_check.ENA
rx => error.IN1
rx => shift_reg.DATAB
rx => always0.IN1
tick => always0.IN1
data_out[0] <= data_out[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[1] <= data_out[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[2] <= data_out[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[3] <= data_out[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[4] <= data_out[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[5] <= data_out[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[6] <= data_out[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[7] <= data_out[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE
done <= done~reg0.DB_MAX_OUTPUT_PORT_TYPE
error <= error~reg0.DB_MAX_OUTPUT_PORT_TYPE


|uart_board|div_clock:div_clock_inst
clk => pulse~reg0.CLK
clk => counter[0].CLK
clk => counter[1].CLK
clk => counter[2].CLK
clk => counter[3].CLK
clk => counter[4].CLK
clk => counter[5].CLK
clk => counter[6].CLK
clk => counter[7].CLK
clk => counter[8].CLK
clk => counter[9].CLK
clk => counter[10].CLK
clk => counter[11].CLK
clk => counter[12].CLK
rst => pulse~reg0.ACLR
rst => counter[0].ACLR
rst => counter[1].ACLR
rst => counter[2].ACLR
rst => counter[3].ACLR
rst => counter[4].ACLR
rst => counter[5].ACLR
rst => counter[6].ACLR
rst => counter[7].ACLR
rst => counter[8].ACLR
rst => counter[9].ACLR
rst => counter[10].ACLR
rst => counter[11].ACLR
rst => counter[12].ACLR
pulse <= pulse~reg0.DB_MAX_OUTPUT_PORT_TYPE


